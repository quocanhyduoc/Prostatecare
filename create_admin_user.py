#!/usr/bin/env python3
"""
Script t·∫°o user admin ƒë·∫ßu ti√™n cho production
Script to create first admin user for production
"""

import os
import sys
import getpass
from pathlib import Path

# Th√™m th∆∞ m·ª•c ·ª©ng d·ª•ng v√†o Python path
current_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(current_dir))

# Load environment variables
from production_config import load_environment_variables
load_environment_variables()

from app import app, db
from models import User
from werkzeug.security import generate_password_hash

def create_admin_user():
    """T·∫°o user admin ƒë·∫ßu ti√™n"""
    
    with app.app_context():
        # Ki·ªÉm tra xem ƒë√£ c√≥ admin user ch∆∞a
        existing_admin = User.query.filter_by(is_admin=True).first()
        if existing_admin:
            print(f"‚ùå Admin user ƒë√£ t·ªìn t·∫°i: {existing_admin.username}")
            return
        
        print("üîß T·∫°o user admin ƒë·∫ßu ti√™n cho h·ªá th·ªëng")
        print("=" * 50)
        
        # Nh·∫≠p th√¥ng tin admin
        username = input("Nh·∫≠p username admin: ").strip()
        if not username:
            username = "admin"
            
        email = input("Nh·∫≠p email admin: ").strip()
        if not email:
            email = "admin@example.com"
            
        # Nh·∫≠p m·∫≠t kh·∫©u an to√†n
        while True:
            password = getpass.getpass("Nh·∫≠p m·∫≠t kh·∫©u admin: ")
            password_confirm = getpass.getpass("X√°c nh·∫≠n m·∫≠t kh·∫©u: ")
            
            if password == password_confirm:
                if len(password) >= 8:
                    break
                else:
                    print("‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±!")
            else:
                print("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
        
        try:
            # T·∫°o admin user
            admin_user = User(
                username=username,
                email=email,
                password_hash=generate_password_hash(password),
                is_admin=True,
                can_delete_patients=True
            )
            
            db.session.add(admin_user)
            db.session.commit()
            
            print("‚úÖ T·∫°o admin user th√†nh c√¥ng!")
            print(f"   Username: {username}")
            print(f"   Email: {email}")
            print(f"   Quy·ªÅn: Admin (c√≥ th·ªÉ x√≥a b·ªánh nh√¢n)")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå L·ªói t·∫°o admin user: {str(e)}")

def verify_database_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi database"""
    
    with app.app_context():
        try:
            # Test database connection
            with db.engine.connect() as connection:
                connection.execute(db.text('SELECT 1'))
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng")
            
            # T·∫°o tables n·∫øu ch∆∞a c√≥
            db.create_all()
            print("‚úÖ Database tables ƒë√£ s·∫µn s√†ng")
            
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi database: {str(e)}")
            print("   Ki·ªÉm tra l·∫°i DATABASE_URL trong .env file")
            return False

if __name__ == "__main__":
    print("üè• Prostate Cancer Management System - Admin Setup")
    print("=" * 60)
    
    # Ki·ªÉm tra database connection
    if verify_database_connection():
        # T·∫°o admin user
        create_admin_user()
    else:
        print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh.")